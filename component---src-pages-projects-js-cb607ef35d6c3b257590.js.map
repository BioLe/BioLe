{"version":3,"sources":["webpack:///./src/pages/projects.js"],"names":["WorkIndex","_ref","works","data","allMarkdownRemark","edges","React","createElement","Fragment","Layout","SEO","title","Intro","style","textAlign","ContainerLayout","className","map","_ref2","node","frontmatter","fields","slug","WorkPost","key","Link","to","Img","fluid","image","childImageSharp","Category","category","Title","boxShadow","Text","dangerouslySetInnerHTML","__html","description","excerpt","tags","tag","index","Tag"],"mappings":"8FAAA,qGA2DeA,UApDG,SAAHC,GAAkB,IACzBC,EADiBD,EAAJE,KACAC,kBAAkBC,MAErC,OACEC,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACE,IAAM,KACLH,IAAAC,cAACG,IAAG,CAACC,MAAM,cACXL,IAAAC,cAACK,IAAK,KACFN,IAAAC,cAAA,MAAIM,MAAO,CAACC,UAAU,WAAW,4DACjCR,IAAAC,cAAA,WACFD,IAAAC,cAACQ,IAAe,KACdT,IAAAC,cAACQ,IAAe,CAACC,UAAU,WACxBd,EAAMe,KAAI,SAAAC,GAAe,IAAZC,EAAID,EAAJC,KACRR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAClD,OACEhB,IAAAC,cAACgB,IAAQ,CAACC,IAAKL,EAAKE,OAAOC,MACzBhB,IAAAC,cAAA,OAAKS,UAAU,SACbV,IAAAC,cAAA,OAAKS,UAAU,iBACbV,IAAAC,cAACkB,OAAI,CAACC,GAAIP,EAAKE,OAAOC,MACpBhB,IAAAC,cAACoB,IAAG,CAACC,MAAOT,EAAKC,YAAYS,MAAMC,gBAAgBF,MAAOjB,MAAM,kBAItEL,IAAAC,cAAA,OAAKS,UAAU,WACbV,IAAAC,cAAA,cACED,IAAAC,cAACwB,IAAQ,KAAEZ,EAAKC,YAAYY,UAC5B1B,IAAAC,cAAC0B,IAAK,KACJ3B,IAAAC,cAACkB,OAAI,CAACT,UAAU,0BAA0BH,MAAO,CAAEqB,UAAU,QAAWR,GAAIP,EAAKE,OAAOC,MACrFX,KAILL,IAAAC,cAAC4B,IAAI,CACHC,wBAAyB,CACvBC,OAAQlB,EAAKC,YAAYkB,aAAenB,EAAKoB,WAGjDjC,IAAAC,cAAA,WACGY,EAAKC,YAAYoB,KAAKvB,KAAI,SAACwB,EAAKC,GAAK,OAAMpC,IAAAC,cAACoC,IAAG,CAACnB,IAAKkB,GAAQD","file":"component---src-pages-projects-js-cb607ef35d6c3b257590.js","sourcesContent":["import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport {Tag, ContainerLayout, WorkPost, Category, Intro, SubTitle, Title, Text} from \"../components/common\"\r\n\r\nconst WorkIndex = ({ data }) => {\r\n  const works = data.allMarkdownRemark.edges\r\n\r\n  return (\r\n    <>\r\n      <Layout> \r\n        <SEO title=\"Showcases\" />\r\n        <Intro>\r\n            <h2 style={{textAlign:'center'}}>Some of my projects, click any of them for more details!</h2>\r\n            <br></br>\r\n          <ContainerLayout>\r\n            <ContainerLayout className=\"wrapper\">\r\n              {works.map(({ node }) => {\r\n              const title = node.frontmatter.title || node.fields.slug\r\n                return (\r\n                  <WorkPost key={node.fields.slug}>\r\n                    <div className=\"media\">\r\n                      <div className=\"image-wrapper\">\r\n                        <Link to={node.fields.slug}>\r\n                          <Img fluid={node.frontmatter.image.childImageSharp.fluid} title=\"work title\" />\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                      <header>\r\n                        <Category>{node.frontmatter.category}</Category>\r\n                        <Title>\r\n                          <Link className=\"text-primary lined-link\" style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n                            {title} \r\n                          </Link>\r\n                        </Title>\r\n                      </header>\r\n                        <Text\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: node.frontmatter.description || node.excerpt,\r\n                          }}\r\n                        />\r\n                        <div>\r\n                          {node.frontmatter.tags.map((tag, index) => (<Tag key={index}>{tag}</Tag>))}\r\n                        </div>\r\n                    </div>\r\n                  </WorkPost>\r\n                )\r\n              })}\r\n            </ContainerLayout>\r\n          </ContainerLayout>\r\n        </Intro>\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorkIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/(works)/\"}}, sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600, quality: 100) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            tags\r\n            category\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}